// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.um.canario.models;

import com.um.canario.models.Tweeter;
import com.um.canario.models.TweeterDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect TweeterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TweeterDataOnDemand: @Component;
    
    private Random TweeterDataOnDemand.rnd = new SecureRandom();
    
    private List<Tweeter> TweeterDataOnDemand.data;
    
    public Tweeter TweeterDataOnDemand.getNewTransientTweeter(int index) {
        Tweeter obj = new Tweeter();
        setAllowGeolocation(obj, index);
        setAuthority(obj, index);
        setBirthDate(obj, index);
        setEmail(obj, index);
        setEnabled(obj, index);
        setLname(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        setPhotoUrl(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void TweeterDataOnDemand.setAllowGeolocation(Tweeter obj, int index) {
        Boolean allowGeolocation = Boolean.TRUE;
        obj.setAllowGeolocation(allowGeolocation);
    }
    
    public void TweeterDataOnDemand.setAuthority(Tweeter obj, int index) {
        String authority = "authority_" + index;
        obj.setAuthority(authority);
    }
    
    public void TweeterDataOnDemand.setBirthDate(Tweeter obj, int index) {
        Date birthDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setBirthDate(birthDate);
    }
    
    public void TweeterDataOnDemand.setEmail(Tweeter obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void TweeterDataOnDemand.setEnabled(Tweeter obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void TweeterDataOnDemand.setLname(Tweeter obj, int index) {
        String lname = "lname_" + index;
        obj.setLname(lname);
    }
    
    public void TweeterDataOnDemand.setName(Tweeter obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void TweeterDataOnDemand.setPassword(Tweeter obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void TweeterDataOnDemand.setPhotoUrl(Tweeter obj, int index) {
        String photoUrl = "photoUrl_" + index;
        obj.setPhotoUrl(photoUrl);
    }
    
    public void TweeterDataOnDemand.setUsername(Tweeter obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public Tweeter TweeterDataOnDemand.getSpecificTweeter(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Tweeter obj = data.get(index);
        Long id = obj.getId();
        return Tweeter.findTweeter(id);
    }
    
    public Tweeter TweeterDataOnDemand.getRandomTweeter() {
        init();
        Tweeter obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Tweeter.findTweeter(id);
    }
    
    public boolean TweeterDataOnDemand.modifyTweeter(Tweeter obj) {
        return false;
    }
    
    public void TweeterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Tweeter.findTweeterEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Tweeter' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Tweeter>();
        for (int i = 0; i < 10; i++) {
            Tweeter obj = getNewTransientTweeter(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
